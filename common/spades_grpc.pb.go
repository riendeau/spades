// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: common/spades.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpadesClient is the client API for Spades service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpadesClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
}

type spadesClient struct {
	cc grpc.ClientConnInterface
}

func NewSpadesClient(cc grpc.ClientConnInterface) SpadesClient {
	return &spadesClient{cc}
}

func (c *spadesClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/common.Spades/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpadesServer is the server API for Spades service.
// All implementations must embed UnimplementedSpadesServer
// for forward compatibility
type SpadesServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	mustEmbedUnimplementedSpadesServer()
}

// UnimplementedSpadesServer must be embedded to have forward compatible implementations.
type UnimplementedSpadesServer struct {
}

func (UnimplementedSpadesServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedSpadesServer) mustEmbedUnimplementedSpadesServer() {}

// UnsafeSpadesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpadesServer will
// result in compilation errors.
type UnsafeSpadesServer interface {
	mustEmbedUnimplementedSpadesServer()
}

func RegisterSpadesServer(s grpc.ServiceRegistrar, srv SpadesServer) {
	s.RegisterService(&Spades_ServiceDesc, srv)
}

func _Spades_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpadesServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.Spades/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpadesServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Spades_ServiceDesc is the grpc.ServiceDesc for Spades service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Spades_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.Spades",
	HandlerType: (*SpadesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Spades_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/spades.proto",
}
